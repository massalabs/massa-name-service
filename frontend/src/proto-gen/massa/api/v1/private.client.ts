// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "massa/api/v1/private.proto" (package "massa.api.v1", syntax proto3)
// tslint:disable
//
// Copyright (c) 2023 MASSA LABS <info@massa.net>
//
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { PrivateService } from './private';
import type { UnbanNodesByIpsResponse } from './private';
import type { UnbanNodesByIpsRequest } from './private';
import type { UnbanNodesByIdsResponse } from './private';
import type { UnbanNodesByIdsRequest } from './private';
import type { ShutdownGracefullyResponse } from './private';
import type { ShutdownGracefullyRequest } from './private';
import type { SignMessagesResponse } from './private';
import type { SignMessagesRequest } from './private';
import type { RemoveStakingAddressesResponse } from './private';
import type { RemoveStakingAddressesRequest } from './private';
import type { RemoveFromPeersWhitelistResponse } from './private';
import type { RemoveFromPeersWhitelistRequest } from './private';
import type { RemoveFromBootstrapWhitelistResponse } from './private';
import type { RemoveFromBootstrapWhitelistRequest } from './private';
import type { RemoveFromBootstrapBlacklistResponse } from './private';
import type { RemoveFromBootstrapBlacklistRequest } from './private';
import type { BanNodesByIpsResponse } from './private';
import type { BanNodesByIpsRequest } from './private';
import type { BanNodesByIdsResponse } from './private';
import type { BanNodesByIdsRequest } from './private';
import type { GetPeersWhitelistResponse } from './private';
import type { GetPeersWhitelistRequest } from './private';
import type { GetNodeStatusResponse } from './private';
import type { GetNodeStatusRequest } from './private';
import type { GetMipStatusResponse } from './private';
import type { GetMipStatusRequest } from './private';
import type { GetBootstrapWhitelistResponse } from './private';
import type { GetBootstrapWhitelistRequest } from './private';
import type { GetBootstrapBlacklistResponse } from './private';
import type { GetBootstrapBlacklistRequest } from './private';
import type { AllowEveryoneToBootstrapResponse } from './private';
import type { AllowEveryoneToBootstrapRequest } from './private';
import type { AddStakingSecretKeysResponse } from './private';
import type { AddStakingSecretKeysRequest } from './private';
import type { AddToPeersWhitelistResponse } from './private';
import type { AddToPeersWhitelistRequest } from './private';
import type { AddToBootstrapWhitelistResponse } from './private';
import type { AddToBootstrapWhitelistRequest } from './private';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { AddToBootstrapBlacklistResponse } from './private';
import type { AddToBootstrapBlacklistRequest } from './private';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';
/**
 * Massa private gRPC service
 *
 * @generated from protobuf service massa.api.v1.PrivateService
 */
export interface IPrivateServiceClient {
  /**
   * Add IP addresses to node bootstrap blacklist
   *
   * @generated from protobuf rpc: AddToBootstrapBlacklist(massa.api.v1.AddToBootstrapBlacklistRequest) returns (massa.api.v1.AddToBootstrapBlacklistResponse);
   */
  addToBootstrapBlacklist(
    input: AddToBootstrapBlacklistRequest,
    options?: RpcOptions,
  ): UnaryCall<AddToBootstrapBlacklistRequest, AddToBootstrapBlacklistResponse>;
  /**
   * Add IP addresses to node bootstrap whitelist
   *
   * @generated from protobuf rpc: AddToBootstrapWhitelist(massa.api.v1.AddToBootstrapWhitelistRequest) returns (massa.api.v1.AddToBootstrapWhitelistResponse);
   */
  addToBootstrapWhitelist(
    input: AddToBootstrapWhitelistRequest,
    options?: RpcOptions,
  ): UnaryCall<AddToBootstrapWhitelistRequest, AddToBootstrapWhitelistResponse>;
  /**
   * Add IP addresses to node peers whitelist. No confirmation to expect.
   * Note: If the ip was unknown it adds it to the known peers, otherwise it updates the peer type
   *
   * @generated from protobuf rpc: AddToPeersWhitelist(massa.api.v1.AddToPeersWhitelistRequest) returns (massa.api.v1.AddToPeersWhitelistResponse);
   */
  addToPeersWhitelist(
    input: AddToPeersWhitelistRequest,
    options?: RpcOptions,
  ): UnaryCall<AddToPeersWhitelistRequest, AddToPeersWhitelistResponse>;
  /**
   * Add staking secret keys to wallet
   *
   * @generated from protobuf rpc: AddStakingSecretKeys(massa.api.v1.AddStakingSecretKeysRequest) returns (massa.api.v1.AddStakingSecretKeysResponse);
   */
  addStakingSecretKeys(
    input: AddStakingSecretKeysRequest,
    options?: RpcOptions,
  ): UnaryCall<AddStakingSecretKeysRequest, AddStakingSecretKeysResponse>;
  /**
   * Allow everyone to bootstrap from the node by removing bootstrap whitelist configuration file
   *
   * @generated from protobuf rpc: AllowEveryoneToBootstrap(massa.api.v1.AllowEveryoneToBootstrapRequest) returns (massa.api.v1.AllowEveryoneToBootstrapResponse);
   */
  allowEveryoneToBootstrap(
    input: AllowEveryoneToBootstrapRequest,
    options?: RpcOptions,
  ): UnaryCall<
    AllowEveryoneToBootstrapRequest,
    AllowEveryoneToBootstrapResponse
  >;
  /**
   * Get node bootstrap blacklist IP addresses
   *
   * @generated from protobuf rpc: GetBootstrapBlacklist(massa.api.v1.GetBootstrapBlacklistRequest) returns (massa.api.v1.GetBootstrapBlacklistResponse);
   */
  getBootstrapBlacklist(
    input: GetBootstrapBlacklistRequest,
    options?: RpcOptions,
  ): UnaryCall<GetBootstrapBlacklistRequest, GetBootstrapBlacklistResponse>;
  /**
   * Get node bootstrap whitelist IP addresses
   *
   * @generated from protobuf rpc: GetBootstrapWhitelist(massa.api.v1.GetBootstrapWhitelistRequest) returns (massa.api.v1.GetBootstrapWhitelistResponse);
   */
  getBootstrapWhitelist(
    input: GetBootstrapWhitelistRequest,
    options?: RpcOptions,
  ): UnaryCall<GetBootstrapWhitelistRequest, GetBootstrapWhitelistResponse>;
  /**
   * Get Mip status
   *
   * @generated from protobuf rpc: GetMipStatus(massa.api.v1.GetMipStatusRequest) returns (massa.api.v1.GetMipStatusResponse);
   */
  getMipStatus(
    input: GetMipStatusRequest,
    options?: RpcOptions,
  ): UnaryCall<GetMipStatusRequest, GetMipStatusResponse>;
  /**
   * Get node status
   *
   * @generated from protobuf rpc: GetNodeStatus(massa.api.v1.GetNodeStatusRequest) returns (massa.api.v1.GetNodeStatusResponse);
   */
  getNodeStatus(
    input: GetNodeStatusRequest,
    options?: RpcOptions,
  ): UnaryCall<GetNodeStatusRequest, GetNodeStatusResponse>;
  /**
   * Get node peers whitelist IP addresses
   *
   * @generated from protobuf rpc: GetPeersWhitelist(massa.api.v1.GetPeersWhitelistRequest) returns (massa.api.v1.GetPeersWhitelistResponse);
   */
  getPeersWhitelist(
    input: GetPeersWhitelistRequest,
    options?: RpcOptions,
  ): UnaryCall<GetPeersWhitelistRequest, GetPeersWhitelistResponse>;
  /**
   * Ban multiple nodes by their individual ids
   *
   * @generated from protobuf rpc: BanNodesByIds(massa.api.v1.BanNodesByIdsRequest) returns (massa.api.v1.BanNodesByIdsResponse);
   */
  banNodesByIds(
    input: BanNodesByIdsRequest,
    options?: RpcOptions,
  ): UnaryCall<BanNodesByIdsRequest, BanNodesByIdsResponse>;
  /**
   * Ban multiple nodes by their individual IP addresses
   *
   * @generated from protobuf rpc: BanNodesByIps(massa.api.v1.BanNodesByIpsRequest) returns (massa.api.v1.BanNodesByIpsResponse);
   */
  banNodesByIps(
    input: BanNodesByIpsRequest,
    options?: RpcOptions,
  ): UnaryCall<BanNodesByIpsRequest, BanNodesByIpsResponse>;
  /**
   * Remove from bootstrap blacklist given IP addresses
   *
   * @generated from protobuf rpc: RemoveFromBootstrapBlacklist(massa.api.v1.RemoveFromBootstrapBlacklistRequest) returns (massa.api.v1.RemoveFromBootstrapBlacklistResponse);
   */
  removeFromBootstrapBlacklist(
    input: RemoveFromBootstrapBlacklistRequest,
    options?: RpcOptions,
  ): UnaryCall<
    RemoveFromBootstrapBlacklistRequest,
    RemoveFromBootstrapBlacklistResponse
  >;
  /**
   * Remove from bootstrap whitelist given IP addresses
   *
   * @generated from protobuf rpc: RemoveFromBootstrapWhitelist(massa.api.v1.RemoveFromBootstrapWhitelistRequest) returns (massa.api.v1.RemoveFromBootstrapWhitelistResponse);
   */
  removeFromBootstrapWhitelist(
    input: RemoveFromBootstrapWhitelistRequest,
    options?: RpcOptions,
  ): UnaryCall<
    RemoveFromBootstrapWhitelistRequest,
    RemoveFromBootstrapWhitelistResponse
  >;
  /**
   * Remove from peers whitelist given IP addresses
   *
   * @generated from protobuf rpc: RemoveFromPeersWhitelist(massa.api.v1.RemoveFromPeersWhitelistRequest) returns (massa.api.v1.RemoveFromPeersWhitelistResponse);
   */
  removeFromPeersWhitelist(
    input: RemoveFromPeersWhitelistRequest,
    options?: RpcOptions,
  ): UnaryCall<
    RemoveFromPeersWhitelistRequest,
    RemoveFromPeersWhitelistResponse
  >;
  /**
   * Remove addresses from staking
   *
   * @generated from protobuf rpc: RemoveStakingAddresses(massa.api.v1.RemoveStakingAddressesRequest) returns (massa.api.v1.RemoveStakingAddressesResponse);
   */
  removeStakingAddresses(
    input: RemoveStakingAddressesRequest,
    options?: RpcOptions,
  ): UnaryCall<RemoveStakingAddressesRequest, RemoveStakingAddressesResponse>;
  /**
   * Sign messages with node's key
   *
   * @generated from protobuf rpc: SignMessages(massa.api.v1.SignMessagesRequest) returns (massa.api.v1.SignMessagesResponse);
   */
  signMessages(
    input: SignMessagesRequest,
    options?: RpcOptions,
  ): UnaryCall<SignMessagesRequest, SignMessagesResponse>;
  /**
   * Shutdown the node gracefully
   *
   * @generated from protobuf rpc: ShutdownGracefully(massa.api.v1.ShutdownGracefullyRequest) returns (massa.api.v1.ShutdownGracefullyResponse);
   */
  shutdownGracefully(
    input: ShutdownGracefullyRequest,
    options?: RpcOptions,
  ): UnaryCall<ShutdownGracefullyRequest, ShutdownGracefullyResponse>;
  /**
   * Unban multiple nodes by their individual ids
   *
   * @generated from protobuf rpc: UnbanNodesByIds(massa.api.v1.UnbanNodesByIdsRequest) returns (massa.api.v1.UnbanNodesByIdsResponse);
   */
  unbanNodesByIds(
    input: UnbanNodesByIdsRequest,
    options?: RpcOptions,
  ): UnaryCall<UnbanNodesByIdsRequest, UnbanNodesByIdsResponse>;
  /**
   * Unban multiple nodes by their individual IP addresses
   *
   * @generated from protobuf rpc: UnbanNodesByIps(massa.api.v1.UnbanNodesByIpsRequest) returns (massa.api.v1.UnbanNodesByIpsResponse);
   */
  unbanNodesByIps(
    input: UnbanNodesByIpsRequest,
    options?: RpcOptions,
  ): UnaryCall<UnbanNodesByIpsRequest, UnbanNodesByIpsResponse>;
}
/**
 * Massa private gRPC service
 *
 * @generated from protobuf service massa.api.v1.PrivateService
 */
export class PrivateServiceClient
  implements IPrivateServiceClient, ServiceInfo
{
  typeName = PrivateService.typeName;
  methods = PrivateService.methods;
  options = PrivateService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * Add IP addresses to node bootstrap blacklist
   *
   * @generated from protobuf rpc: AddToBootstrapBlacklist(massa.api.v1.AddToBootstrapBlacklistRequest) returns (massa.api.v1.AddToBootstrapBlacklistResponse);
   */
  addToBootstrapBlacklist(
    input: AddToBootstrapBlacklistRequest,
    options?: RpcOptions,
  ): UnaryCall<
    AddToBootstrapBlacklistRequest,
    AddToBootstrapBlacklistResponse
  > {
    const method = this.methods[0];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<
      AddToBootstrapBlacklistRequest,
      AddToBootstrapBlacklistResponse
    >('unary', this._transport, method, opt, input);
  }
  /**
   * Add IP addresses to node bootstrap whitelist
   *
   * @generated from protobuf rpc: AddToBootstrapWhitelist(massa.api.v1.AddToBootstrapWhitelistRequest) returns (massa.api.v1.AddToBootstrapWhitelistResponse);
   */
  addToBootstrapWhitelist(
    input: AddToBootstrapWhitelistRequest,
    options?: RpcOptions,
  ): UnaryCall<
    AddToBootstrapWhitelistRequest,
    AddToBootstrapWhitelistResponse
  > {
    const method = this.methods[1];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<
      AddToBootstrapWhitelistRequest,
      AddToBootstrapWhitelistResponse
    >('unary', this._transport, method, opt, input);
  }
  /**
   * Add IP addresses to node peers whitelist. No confirmation to expect.
   * Note: If the ip was unknown it adds it to the known peers, otherwise it updates the peer type
   *
   * @generated from protobuf rpc: AddToPeersWhitelist(massa.api.v1.AddToPeersWhitelistRequest) returns (massa.api.v1.AddToPeersWhitelistResponse);
   */
  addToPeersWhitelist(
    input: AddToPeersWhitelistRequest,
    options?: RpcOptions,
  ): UnaryCall<AddToPeersWhitelistRequest, AddToPeersWhitelistResponse> {
    const method = this.methods[2];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<
      AddToPeersWhitelistRequest,
      AddToPeersWhitelistResponse
    >('unary', this._transport, method, opt, input);
  }
  /**
   * Add staking secret keys to wallet
   *
   * @generated from protobuf rpc: AddStakingSecretKeys(massa.api.v1.AddStakingSecretKeysRequest) returns (massa.api.v1.AddStakingSecretKeysResponse);
   */
  addStakingSecretKeys(
    input: AddStakingSecretKeysRequest,
    options?: RpcOptions,
  ): UnaryCall<AddStakingSecretKeysRequest, AddStakingSecretKeysResponse> {
    const method = this.methods[3];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<
      AddStakingSecretKeysRequest,
      AddStakingSecretKeysResponse
    >('unary', this._transport, method, opt, input);
  }
  /**
   * Allow everyone to bootstrap from the node by removing bootstrap whitelist configuration file
   *
   * @generated from protobuf rpc: AllowEveryoneToBootstrap(massa.api.v1.AllowEveryoneToBootstrapRequest) returns (massa.api.v1.AllowEveryoneToBootstrapResponse);
   */
  allowEveryoneToBootstrap(
    input: AllowEveryoneToBootstrapRequest,
    options?: RpcOptions,
  ): UnaryCall<
    AllowEveryoneToBootstrapRequest,
    AllowEveryoneToBootstrapResponse
  > {
    const method = this.methods[4];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<
      AllowEveryoneToBootstrapRequest,
      AllowEveryoneToBootstrapResponse
    >('unary', this._transport, method, opt, input);
  }
  /**
   * Get node bootstrap blacklist IP addresses
   *
   * @generated from protobuf rpc: GetBootstrapBlacklist(massa.api.v1.GetBootstrapBlacklistRequest) returns (massa.api.v1.GetBootstrapBlacklistResponse);
   */
  getBootstrapBlacklist(
    input: GetBootstrapBlacklistRequest,
    options?: RpcOptions,
  ): UnaryCall<GetBootstrapBlacklistRequest, GetBootstrapBlacklistResponse> {
    const method = this.methods[5];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<
      GetBootstrapBlacklistRequest,
      GetBootstrapBlacklistResponse
    >('unary', this._transport, method, opt, input);
  }
  /**
   * Get node bootstrap whitelist IP addresses
   *
   * @generated from protobuf rpc: GetBootstrapWhitelist(massa.api.v1.GetBootstrapWhitelistRequest) returns (massa.api.v1.GetBootstrapWhitelistResponse);
   */
  getBootstrapWhitelist(
    input: GetBootstrapWhitelistRequest,
    options?: RpcOptions,
  ): UnaryCall<GetBootstrapWhitelistRequest, GetBootstrapWhitelistResponse> {
    const method = this.methods[6];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<
      GetBootstrapWhitelistRequest,
      GetBootstrapWhitelistResponse
    >('unary', this._transport, method, opt, input);
  }
  /**
   * Get Mip status
   *
   * @generated from protobuf rpc: GetMipStatus(massa.api.v1.GetMipStatusRequest) returns (massa.api.v1.GetMipStatusResponse);
   */
  getMipStatus(
    input: GetMipStatusRequest,
    options?: RpcOptions,
  ): UnaryCall<GetMipStatusRequest, GetMipStatusResponse> {
    const method = this.methods[7];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<GetMipStatusRequest, GetMipStatusResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * Get node status
   *
   * @generated from protobuf rpc: GetNodeStatus(massa.api.v1.GetNodeStatusRequest) returns (massa.api.v1.GetNodeStatusResponse);
   */
  getNodeStatus(
    input: GetNodeStatusRequest,
    options?: RpcOptions,
  ): UnaryCall<GetNodeStatusRequest, GetNodeStatusResponse> {
    const method = this.methods[8];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<GetNodeStatusRequest, GetNodeStatusResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * Get node peers whitelist IP addresses
   *
   * @generated from protobuf rpc: GetPeersWhitelist(massa.api.v1.GetPeersWhitelistRequest) returns (massa.api.v1.GetPeersWhitelistResponse);
   */
  getPeersWhitelist(
    input: GetPeersWhitelistRequest,
    options?: RpcOptions,
  ): UnaryCall<GetPeersWhitelistRequest, GetPeersWhitelistResponse> {
    const method = this.methods[9];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<GetPeersWhitelistRequest, GetPeersWhitelistResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * Ban multiple nodes by their individual ids
   *
   * @generated from protobuf rpc: BanNodesByIds(massa.api.v1.BanNodesByIdsRequest) returns (massa.api.v1.BanNodesByIdsResponse);
   */
  banNodesByIds(
    input: BanNodesByIdsRequest,
    options?: RpcOptions,
  ): UnaryCall<BanNodesByIdsRequest, BanNodesByIdsResponse> {
    const method = this.methods[10];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<BanNodesByIdsRequest, BanNodesByIdsResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * Ban multiple nodes by their individual IP addresses
   *
   * @generated from protobuf rpc: BanNodesByIps(massa.api.v1.BanNodesByIpsRequest) returns (massa.api.v1.BanNodesByIpsResponse);
   */
  banNodesByIps(
    input: BanNodesByIpsRequest,
    options?: RpcOptions,
  ): UnaryCall<BanNodesByIpsRequest, BanNodesByIpsResponse> {
    const method = this.methods[11];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<BanNodesByIpsRequest, BanNodesByIpsResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * Remove from bootstrap blacklist given IP addresses
   *
   * @generated from protobuf rpc: RemoveFromBootstrapBlacklist(massa.api.v1.RemoveFromBootstrapBlacklistRequest) returns (massa.api.v1.RemoveFromBootstrapBlacklistResponse);
   */
  removeFromBootstrapBlacklist(
    input: RemoveFromBootstrapBlacklistRequest,
    options?: RpcOptions,
  ): UnaryCall<
    RemoveFromBootstrapBlacklistRequest,
    RemoveFromBootstrapBlacklistResponse
  > {
    const method = this.methods[12];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<
      RemoveFromBootstrapBlacklistRequest,
      RemoveFromBootstrapBlacklistResponse
    >('unary', this._transport, method, opt, input);
  }
  /**
   * Remove from bootstrap whitelist given IP addresses
   *
   * @generated from protobuf rpc: RemoveFromBootstrapWhitelist(massa.api.v1.RemoveFromBootstrapWhitelistRequest) returns (massa.api.v1.RemoveFromBootstrapWhitelistResponse);
   */
  removeFromBootstrapWhitelist(
    input: RemoveFromBootstrapWhitelistRequest,
    options?: RpcOptions,
  ): UnaryCall<
    RemoveFromBootstrapWhitelistRequest,
    RemoveFromBootstrapWhitelistResponse
  > {
    const method = this.methods[13];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<
      RemoveFromBootstrapWhitelistRequest,
      RemoveFromBootstrapWhitelistResponse
    >('unary', this._transport, method, opt, input);
  }
  /**
   * Remove from peers whitelist given IP addresses
   *
   * @generated from protobuf rpc: RemoveFromPeersWhitelist(massa.api.v1.RemoveFromPeersWhitelistRequest) returns (massa.api.v1.RemoveFromPeersWhitelistResponse);
   */
  removeFromPeersWhitelist(
    input: RemoveFromPeersWhitelistRequest,
    options?: RpcOptions,
  ): UnaryCall<
    RemoveFromPeersWhitelistRequest,
    RemoveFromPeersWhitelistResponse
  > {
    const method = this.methods[14];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<
      RemoveFromPeersWhitelistRequest,
      RemoveFromPeersWhitelistResponse
    >('unary', this._transport, method, opt, input);
  }
  /**
   * Remove addresses from staking
   *
   * @generated from protobuf rpc: RemoveStakingAddresses(massa.api.v1.RemoveStakingAddressesRequest) returns (massa.api.v1.RemoveStakingAddressesResponse);
   */
  removeStakingAddresses(
    input: RemoveStakingAddressesRequest,
    options?: RpcOptions,
  ): UnaryCall<RemoveStakingAddressesRequest, RemoveStakingAddressesResponse> {
    const method = this.methods[15];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<
      RemoveStakingAddressesRequest,
      RemoveStakingAddressesResponse
    >('unary', this._transport, method, opt, input);
  }
  /**
   * Sign messages with node's key
   *
   * @generated from protobuf rpc: SignMessages(massa.api.v1.SignMessagesRequest) returns (massa.api.v1.SignMessagesResponse);
   */
  signMessages(
    input: SignMessagesRequest,
    options?: RpcOptions,
  ): UnaryCall<SignMessagesRequest, SignMessagesResponse> {
    const method = this.methods[16];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<SignMessagesRequest, SignMessagesResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * Shutdown the node gracefully
   *
   * @generated from protobuf rpc: ShutdownGracefully(massa.api.v1.ShutdownGracefullyRequest) returns (massa.api.v1.ShutdownGracefullyResponse);
   */
  shutdownGracefully(
    input: ShutdownGracefullyRequest,
    options?: RpcOptions,
  ): UnaryCall<ShutdownGracefullyRequest, ShutdownGracefullyResponse> {
    const method = this.methods[17];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<
      ShutdownGracefullyRequest,
      ShutdownGracefullyResponse
    >('unary', this._transport, method, opt, input);
  }
  /**
   * Unban multiple nodes by their individual ids
   *
   * @generated from protobuf rpc: UnbanNodesByIds(massa.api.v1.UnbanNodesByIdsRequest) returns (massa.api.v1.UnbanNodesByIdsResponse);
   */
  unbanNodesByIds(
    input: UnbanNodesByIdsRequest,
    options?: RpcOptions,
  ): UnaryCall<UnbanNodesByIdsRequest, UnbanNodesByIdsResponse> {
    const method = this.methods[18];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<UnbanNodesByIdsRequest, UnbanNodesByIdsResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * Unban multiple nodes by their individual IP addresses
   *
   * @generated from protobuf rpc: UnbanNodesByIps(massa.api.v1.UnbanNodesByIpsRequest) returns (massa.api.v1.UnbanNodesByIpsResponse);
   */
  unbanNodesByIps(
    input: UnbanNodesByIpsRequest,
    options?: RpcOptions,
  ): UnaryCall<UnbanNodesByIpsRequest, UnbanNodesByIpsResponse> {
    const method = this.methods[19];
    const opt = this._transport.mergeOptions(options);
    return stackIntercept<UnbanNodesByIpsRequest, UnbanNodesByIpsResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
}
